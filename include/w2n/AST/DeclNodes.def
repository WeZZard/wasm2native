/// This file defines macros used for macro-metaprogramming with
/// declarations.

/// DECL(Id, Parent)
///   If the declaration node is not abstract, its enumerator value is
///   DeclKind::Id.  The node's class name is Id##Decl, and the name of
///   its base class (in the Decl hierarchy) is Parent.
#ifndef DECL
#define DECL(Id, Parent)
#endif

/// An abstract declaration node is an abstract base class in the
/// hierarchy; it is never a most-derived type, and it does not have an
/// enumerator in DeclKind.
///
/// Most metaprograms do not care about abstract declarations, so the
/// default is to ignore them.
#ifndef ABSTRACT_DECL
#define ABSTRACT_DECL(Id, Parent)
#endif

/// CONTEXT_DECL(Id, Parent)
///   Used for Decls that are also DeclContexts. The default behavior is
///   to do the same as for Decl.
#ifndef CONTEXT_DECL
#define CONTEXT_DECL(Id, Parent) DECL(Id, Parent)
#endif

/// CONTEXT_VALUE_DECL(Id, Parent)
///   Used for subclasses of ValueDecl that are also DeclContexts. The
///   default behavior is to do the same as for CONTEXT_DECL.
#ifndef CONTEXT_VALUE_DECL
#ifdef VALUE_DECL
#define CONTEXT_VALUE_DECL(Id, Parent) VALUE_DECL(Id, Parent)
#else
#define CONTEXT_VALUE_DECL(Id, Parent) CONTEXT_DECL(Id, Parent)
#endif
#endif

/// SECTION_DECL(Id, Parent)
///   Used for subclasses of SectionDecl.  The default behavior is
///   to do the same as for CONTEXT_DECL.
#ifndef SECTION_DECL
#define SECTION_DECL(Id, Parent) CONTEXT_DECL(Id, Parent)
#endif

/// CUSTOM_SECTION_DECL(Id, Parent)
///   Used for subclasses of CustomSectionDecl.  The default behavior is
///   to do the same as for CONTEXT_DECL.
#ifndef CUSTOM_SECTION_DECL
#define CUSTOM_SECTION_DECL(Id, Parent) SECTION_DECL(Id, Parent)
#endif

/// NAME_SUB_SECTION_DECL(Id, Parent)
///   Used for subclasses of NameSubSectionDecl.  The default behavior is
///   to do the same as for CONTEXT_DECL.
#ifndef NAME_SUB_SECTION_DECL
#define NAME_SUB_SECTION_DECL(Id, Parent) CONTEXT_DECL(Id, Parent)
#endif

/// ABSTRACT_FUNCTION_DECL(Id, Parent)
///   Used for subclasses of AbstractFunction. The default behavior is
///   to do the same as for CONTEXT_DECL.
#ifndef ABSTRACT_FUNCTION_DECL
#define ABSTRACT_FUNCTION_DECL(Id, Parent) CONTEXT_DECL(Id, Parent)
#endif

/// VALUE_DECL(Id, Parent)
///   Used for subclasses of ValueDecl.  The default behavior is to do
///   the same as for DECL.
#ifndef VALUE_DECL
#define VALUE_DECL(Id, Parent) DECL(Id, Parent)
#endif

/// IMPORT_DECL(Id, Parent)
///   Used for subclasses of ImportDecl.  The default behavior is to do
///   the same as for VALUE_DECL.
#ifndef IMPORT_DECL
#define IMPORT_DECL(Id, Parent) VALUE_DECL(Id, Parent)
#endif

/// EXPORT_DECL(Id, Parent)
///   Used for subclasses of ExportDecl.  The default behavior is to do
///   the same as for VALUE_DECL.
#ifndef EXPORT_DECL
#define EXPORT_DECL(Id, Parent) VALUE_DECL(Id, Parent)
#endif

/// DATA_SEG_DECL(Id, Parent)
///   Used for subclasses of DataSegmentDecl.  The default behavior is to
///   do the same as for VALUE_DECL.
#ifndef DATA_SEG_DECL
#define DATA_SEG_DECL(Id, Parent) VALUE_DECL(Id, Parent)
#endif

/// A convenience for determining the range of declarations.  These will
/// always appear immediately after the last member.
#ifndef DECL_RANGE
#define DECL_RANGE(Id, First, Last)
#endif

#ifndef LAST_DECL
#define LAST_DECL(Id)
#endif

// NOTE: For performance, maximize the numer of [important] abstract Decls
// where "First_XYZDecl" == 0 to improve isa/dyn_cast code gen.

// clang-format off

ABSTRACT_DECL(Value, Decl)
  ABSTRACT_DECL(Type, ValueDecl)
    CONTEXT_VALUE_DECL(Module, TypeDecl)
    ABSTRACT_DECL(Section, TypeDecl)
      ABSTRACT_DECL(CustomSection, SectionDecl)
        CUSTOM_SECTION_DECL(NameSection, CustomSectionDecl)
        DECL_RANGE(CustomSection, NameSection, NameSection)
      SECTION_DECL(TypeSection, SectionDecl)
      SECTION_DECL(ImportSection, SectionDecl)
      SECTION_DECL(FuncSection, SectionDecl)
      SECTION_DECL(TableSection, SectionDecl)
      SECTION_DECL(MemorySection, SectionDecl)
      SECTION_DECL(GlobalSection, SectionDecl)
      SECTION_DECL(ExportSection, SectionDecl)
      SECTION_DECL(StartSection, SectionDecl)
      SECTION_DECL(ElementSection, SectionDecl)
      SECTION_DECL(CodeSection, SectionDecl)
      SECTION_DECL(DataSection, SectionDecl)
      SECTION_DECL(DataCountSection, SectionDecl)
      DECL_RANGE(Section, NameSection, DataCountSection)
    ABSTRACT_DECL(NameSubsection, TypeDecl)
      NAME_SUB_SECTION_DECL(ModuleNameSubsection, NameSubsectionDecl)
      NAME_SUB_SECTION_DECL(FuncNameSubsection, NameSubsectionDecl)
      NAME_SUB_SECTION_DECL(LocalNameSubsection, NameSubsectionDecl)
      // TODO: NAME_SUB_SECTION_DECL(LabelNameSubsection, NameSubsectionDecl)
      // TODO: NAME_SUB_SECTION_DECL(TypeNameSubsection, NameSubsectionDecl)
      // TODO: NAME_SUB_SECTION_DECL(TableNameSubsection, NameSubsectionDecl)
      // TODO: NAME_SUB_SECTION_DECL(MemoryNameSubsection, NameSubsectionDecl)
      NAME_SUB_SECTION_DECL(GlobalNameSubsection, NameSubsectionDecl)
      // TODO: NAME_SUB_SECTION_DECL(ElementSegmentNameSubsection, NameSubsectionDecl)
      // TODO: NAME_SUB_SECTION_DECL(DataSegmentNameSubsection, NameSubsectionDecl)
      DECL_RANGE(NameSubsection, ModuleNameSubsection, GlobalNameSubsection)
    VALUE_DECL(FuncType, TypeDecl)
    ABSTRACT_DECL(Import, TypeDecl)
      IMPORT_DECL(ImportFunc, ImportDecl)
      IMPORT_DECL(ImportTable, ImportDecl)
      IMPORT_DECL(ImportMemory, ImportDecl)
      IMPORT_DECL(ImportGlobal, ImportDecl)
      DECL_RANGE(Import, ImportFunc, ImportGlobal)
    VALUE_DECL(Table, TypeDecl)
    VALUE_DECL(Memory, TypeDecl)
    VALUE_DECL(Global, TypeDecl)
    ABSTRACT_DECL(Export, TypeDecl)
      EXPORT_DECL(ExportFunc, ExportDecl)
      EXPORT_DECL(ExportTable, ExportDecl)
      EXPORT_DECL(ExportMemory, ExportDecl)
      EXPORT_DECL(ExportGlobal, ExportDecl)
      DECL_RANGE(Export, ExportFunc, ExportGlobal)
    VALUE_DECL(Code, TypeDecl)
    VALUE_DECL(Func, TypeDecl)
    VALUE_DECL(Local, TypeDecl)
    ABSTRACT_DECL(DataSegment, TypeDecl)
      DATA_SEG_DECL(DataSegmentActive, DataSegmentDecl)
      DATA_SEG_DECL(DataSegmentPassive, DataSegmentDecl)
      DECL_RANGE(DataSegment, DataSegmentActive, DataSegmentPassive)
    VALUE_DECL(Expression, TypeDecl)
  DECL_RANGE(Type, Module, Expression)
DECL_RANGE(Value, Module, Expression)

LAST_DECL(Expression)

// clang-format on

#undef CUSTOM_SECTION_DECL
#undef NAME_SUB_SECTION_DECL
#undef SECTION_DECL
#undef CONTEXT_DECL
#undef ITERABLE_DECL
#undef CONTEXT_VALUE_DECL
#undef ABSTRACT_FUNCTION_DECL
#undef VALUE_DECL
#undef IMPORT_DECL
#undef EXPORT_DECL
#undef DATA_SEG_DECL
#undef DECL_RANGE
#undef ABSTRACT_DECL
#undef DECL
#undef LAST_DECL

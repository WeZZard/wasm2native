/// This file defines macros used for macro-metaprogramming with
/// types.

/// TYPE(Id, Parent)

/// An abstract type node is an abstract base class in the hierarchy; it
/// is never a most-derived type, and it does not have an enumerator in
/// TypeKind.
///
/// Most metaprograms do not care about abstract type, so the default is
/// to ignore them.
#ifndef ABSTRACT_TYPE
#define ABSTRACT_TYPE(Id, Parent)
#endif

#ifndef VALUE_TYPE
#define VALUE_TYPE(Id, Parent) TYPE(Id, Parent)
#endif

#ifndef NUMBER_TYPE
#define NUMBER_TYPE(Id, Parent) VALUE_TYPE(Id, Parent)
#endif

#ifndef VECTOR_TYPE
#define VECTOR_TYPE(Id, Parent) VALUE_TYPE(Id, Parent)
#endif

#ifndef REFERENCE_TYPE
#define REFERENCE_TYPE(Id, Parent) VALUE_TYPE(Id, Parent)
#endif

/// A convenience for determining the range of types.  These will always
/// appear immediately after the last member.
#ifndef TYPE_RANGE
#define TYPE_RANGE(Id, First, Last)
#endif

#ifndef LAST_TYPE
#define LAST_TYPE(Id)
#endif

// clang-format off

ABSTRACT_TYPE(Value, Type)
  ABSTRACT_TYPE(Number, Value)
    ABSTRACT_TYPE(Integer, Number)
      NUMBER_TYPE(I32, Integer)
      NUMBER_TYPE(I64, Integer)
      TYPE_RANGE(Integer, I32, I64)
    ABSTRACT_TYPE(Float, Number)
      NUMBER_TYPE(F32, Float)
      NUMBER_TYPE(F64, Float)
      TYPE_RANGE(Float, F32, F64)
    TYPE_RANGE(Number, I32, F64)
  ABSTRACT_TYPE(Vector, Value)
    VECTOR_TYPE(V128, Vector)
    TYPE_RANGE(Vector, V128, V128)
  ABSTRACT_TYPE(Reference, Value)
    REFERENCE_TYPE(FuncRef, Reference)
    REFERENCE_TYPE(ExternRef, Reference)
    TYPE_RANGE(Reference, FuncRef, ExternRef)
  TYPE_RANGE(Value, I32, ExternRef)

TYPE(Result, Type)
TYPE(Func, Type)
TYPE(Limits, Type)
TYPE(Memory, Type)
TYPE(Table, Type)
TYPE(Global, Type)

LAST_TYPE(Memory)

// clang-format on

#undef TYPE
#undef ABSTRACT_TYPE
#undef VALUE_TYPE
#undef NUMBER_TYPE
#undef VECTOR_TYPE
#undef REFERENCE_TYPE
#undef TYPE_RANGE
#undef LAST_TYPE

//===--- TokenKinds.def - Swift Tokenizer Metaprogramming -----------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project
// authors
//
//===----------------------------------------------------------------===//
///
/// This file defines x-macros used for metaprogramming with lexer tokens.
///
/// Since wasm2native aims to parse both .wasm file and .wat file.
/// Intuitively, .wasm file's tokens are a subset of .wat file's (
/// FIXME: Needs formal implication).
///
/// TOKEN(name)
///   KEYWORD(kw)
///     SWIFT_KEYWORD(kw)
///       DECL_KEYWORD(kw)
///       STMT_KEYWORD(kw)
///       EXPR_KEYWORD(kw)
///   LITERAL(name)
///   MISC(name)
///
//===----------------------------------------------------------------===//

/// TOKEN(NAME)
///   Expands by default for every token kind.
#ifndef TOKEN
#define TOKEN(NAME)
#endif

/// KEYWORD(kw)
///   Expands by default for every WebAssembly keyword, such as 'if',
///   'else', etc. If you only want to use Swift keywords see
///   WASM_KEYWORD.
#ifndef KEYWORD
#define KEYWORD(kw) TOKEN(kw_##kw)
#endif

/// WASM_KEYWORD(kw)
///   Expands for every WebAssembly keyword.
#ifndef WASM_KEYWORD
#define WASM_KEYWORD(kw) KEYWORD(kw)
#endif

/// DECL_KEYWORD(kw)
///   Expands for every WebAssembly keyword that can be used in a
///   declaration.
#ifndef DECL_KEYWORD
#define DECL_KEYWORD(kw) WASM_KEYWORD(kw)
#endif

/// STMT_KEYWORD(kw)
///   Expands for every WebAssembly keyword used in statement grammar.
#ifndef STMT_KEYWORD
#define STMT_KEYWORD(kw) SWIFT_KEYWORD(kw)
#endif

/// EXPR_KEYWORD(kw)
///   Expands for every WebAssembly keyword used in an expression, such as
///   'true', 'false', and 'as'
#ifndef EXPR_KEYWORD
#define EXPR_KEYWORD(kw) WASM_KEYWORD(kw)
#endif

/// LITERAL(name)
///   Tokens representing literal values, e.g. 'integer_literal'.
#ifndef LITERAL
#define LITERAL(name) TOKEN(name)
#endif

/// MISC(name)
///   Miscellaneous tokens, e.g. 'eof' and 'unknown'.
#ifndef MISC
#define MISC(name) TOKEN(name)
#endif

MISC(eof)

#undef TOKEN
#undef KEYWORD
#undef WASM_KEYWORD
#undef DECL_KEYWORD
#undef STMT_KEYWORD
#undef EXPR_KEYWORD
#undef LITERAL
#undef MISC

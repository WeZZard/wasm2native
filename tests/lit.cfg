# tests/lit.cfg - 'lit' test runner config ------------------*- python -*-
#
# This source file is part of the Swift.org open source project
#
# Copyright (c) 2014 - 2021 Apple Inc. and the Swift project authors
# Licensed under Apache License v2.0 with Runtime Library Exception
#
# See https://swift.org/LICENSE.txt for license information
# See https://swift.org/CONTRIBUTORS.txt for the list of Swift project
# authors
#
# ------------------------------------------------------------------------
#
# This is a configuration file for the 'lit' test runner.
#
# Refer to docs/Testing.md for documentation.
#
# Update docs/Testing.md when changing this file.
#
# ------------------------------------------------------------------------

import os

import lit
from lit.LitConfig import LitConfig
from lit.TestingConfig import TestingConfig

# Tell pylint that we know config and lit_config exist somewhere.
if 'PYLINT_IMPORT' in os.environ:
  lit_config = LitConfig()
  config = TestingConfig()

config.name = 'wasm2native Regression Tests'
config.test_format = lit.formats.ShTest(True)
config.test_source_root = os.path.dirname(__file__)


def dump(config: TestingConfig):
  print("name: {}".format(config.name))
  print("test_format: {}".format(config.test_format))
  print("test_source_root: {}".format(config.test_source_root))
  print("environment:")
  for key in config.environment:
    value = config.environment[key]
    print(" {key}={value}".format(key=key, value=value))
  print("standalone_tests: {}".format(config.standalone_tests))
  print("suffixes({}):".format(len(config.suffixes)))
  for suffix in config.suffixes:
    print(" {}".format(suffix))
  print("substitutions({}):".format(len(config.substitutions)))
  for substitution in config.substitutions:
    print(" {}".format(substitution))
  print("unsupported: {}".format(config.unsupported))
  print("parent: {}".format(config.parent))
  print("root: {}".format(config.root))
  print("pipefail: {}".format(config.pipefail))
  print("available_features({}):".format(len(config.available_features)))
  for feature in config.available_features:
    print(" {}".format(feature))

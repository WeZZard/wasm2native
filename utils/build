#!/bin/sh

ARG_BUILD_TYPE="Debug";
NEEDS_CLEAN=0;
CONFIG_ONLY=0;
CUSTOM_PRODUCTS_TO_BUILD=();
DEFAULT_PRODUCTS_TO_BUILD=(LLVM W2N);
DRY_RUN=0;

# $1: ARG
function arg_parse() {
  ARG=$1;
  case $ARG in
    "--debug")
      ARG_BUILD_TYPE="Debug";
      ;;
    "--release")
      ARG_BUILD_TYPE="Release";
      ;;
    "--release-with-debug-info")
      ARG_BUILD_TYPE="RelWithDebInfo";
      ;;
    "--release-min-size")
      ARG_BUILD_TYPE="MinSizeRel";
      ;;
    "--clean")
      NEEDS_CLEAN=1;
      ;;
    "--config-only")
      CONFIG_ONLY=1;
      ;;
    "--build-llvm")
      CUSTOM_PRODUCTS_TO_BUILD+=(LLVM);
      ;;
    "--build-wasm2native")
      CUSTOM_PRODUCTS_TO_BUILD+=(W2N);
      ;;
    "--dry-run")
      DRY_RUN=1;
      ;;
  esac
}

EXEC_PATH="$PWD/$0"
PROJECT_ROOT=$(git rev-parse --show-toplevel)
UTILS_DIR="$PROJECT_ROOT/utils"
MONOREPO_ROOT=$(dirname $PROJECT_ROOT)
BUILD_ROOT="$MONOREPO_ROOT/build"

# 3rd party projects in the monorepo
LLVM_PROJECT_ROOT=$MONOREPO_ROOT/llvm-project
LLVM_ENABLED_PROJECTS="clang;compiler-rt;clang-tools-extra;lld"

SUPPORTED_TARGETS="ARM;AArch64;X86"

# LLVM args
LLVM_SOURCE_ROOT=$LLVM_PROJECT_ROOT/llvm
LLVM_BUILD_ROOT=$BUILD_ROOT/llvm-project
LLVM_CMAKE_CONFIG_ARGS=()
LLVM_CMAKE_CONFIG_ARGS+=("-DCMAKE_BUILD_TYPE=${ARG_BUILD_TYPE}")
LLVM_CMAKE_CONFIG_ARGS+=("-DLLVM_TARGETS_TO_BUILD=${SUPPORTED_TARGETS}")
LLVM_CMAKE_CONFIG_ARGS+=("-DLLVM_ENABLE_PROJECTS=${LLVM_ENABLED_PROJECTS}")
# In the near future we are aiming to build compiler-rt with
# LLVM_ENABLE_RUNTIMES
# Until that happens, we need to unset this variable from LLVM 
# CMakeCache.txt for two reasons:
# * Prevent PRs testing this variable to affect other runs landing
# * unrelated features avoid fallouts should we land such change and then
# * have to revert it to account for unforeseen regressions
LLVM_CMAKE_CONFIG_ARGS+=("-ULLVM_ENABLE_RUNTIMES")
LLVM_CMAKE_CONFIG_ARGS="${LLVM_CMAKE_CONFIG_ARGS[@]}"

# wasm2native args
W2N_SOURCE_ROOT=$PROJECT_ROOT
W2N_BUILD_ROOT=$BUILD_ROOT/wasm2native
W2N_CMAKE_CONFIG_ARGS=()
W2N_CMAKE_CONFIG_ARGS+=("-DCMAKE_BUILD_TYPE:string=${ARG_BUILD_TYPE}")
W2N_CMAKE_CONFIG_ARGS+=("-DW2N_MONOREPO_ROOT:PATH=${MONOREPO_ROOT}")
W2N_CMAKE_CONFIG_ARGS+=("-DW2N_SOURCE_ROOT:PATH=${W2N_SOURCE_ROOT}")
W2N_CMAKE_CONFIG_ARGS+=("-DW2N_BUILD_ROOT:PATH=${W2N_BUILD_ROOT}")
W2N_CMAKE_CONFIG_ARGS+=("-DLLVM_BUILD_ROOT:PATH=${LLVM_BUILD_ROOT}")
W2N_CMAKE_CONFIG_ARGS+=("-DLLVM_SOURCE_ROOT:PATH=${LLVM_SOURCE_ROOT}")
W2N_CMAKE_CONFIG_ARGS+=("-DLLVM_DIR:PATH=${LLVM_BUILD_ROOT}/lib/cmake/llvm")
W2N_CMAKE_CONFIG_ARGS+=("-DLLVM_TARGETS_TO_BUILD:string=${SUPPORTED_TARGETS}")
W2N_CMAKE_CONFIG_ARGS+=("-DLLVM_BUILD_TESTS:bool=true")
W2N_CMAKE_CONFIG_ARGS+=("-DClang_DIR:PATH=${LLVM_BUILD_ROOT}/lib/cmake/clang")
W2N_CMAKE_CONFIG_ARGS="${W2N_CMAKE_CONFIG_ARGS[@]}"

# $1: SECONDS_TO_COUNTDOWN, $2: PRODUCT_NAME
function countdown_for_clean_build() {
  if [[ ! $1 -ge 0 ]]; then
    echo "The number used for countdown second shall be greater than 0.";
    echo "Currently is \"$1\".";
    exit 1;
  fi
  SEC=$1;
  PRODUCT=$2;
  while [ $SEC -ge 0 ]; do
    echo "$SEC seconds left to start the clean build of $PRODUCT...\r\c";
    let "SEC=SEC-1";
    sleep 1;
  done
  return 0;
}

# $1: PRODUCT_NAME, $2: CONFIG_ONLY
function clean() {
  PRODUCT_NAME=$1
  PRODUCT_BUILD_ROOT=${PRODUCT_NAME}_BUILD_ROOT
  PRODUCT_BUILD_ROOT=${!PRODUCT_BUILD_ROOT}
  if [[ ! -d $PRODUCT_BUILD_ROOT ]]; then
    echo "Cleaning built products in directory \"$PRODUCT_BUILD_ROOT\" but the directory itself does not exist."
    return 0
  fi
  echo "rm -rf $PRODUCT_BUILD_ROOT"
  if [[ $DRY_RUN -eq 0 ]]; then
    rm -rf $PRODUCT_BUILD_ROOT
  fi
  return ?0
}

# $1: PRODUCT_NAME, $2: CLEAN, $3: CONFIG_ONLY
function build() {
  PRODUCT_NAME=$1
  if [[ $2 -ne 0 ]]; then
    CONFIG_PRODUCT_ONLY=1;
  else
    CONFIG_PRODUCT_ONLY=0;
  fi
  
  PRODUCT_BUILD_ROOT=${PRODUCT_NAME}_BUILD_ROOT
  PRODUCT_BUILD_ROOT=${!PRODUCT_BUILD_ROOT}
  PRODUCT_SOURCE_ROOT=${PRODUCT_NAME}_SOURCE_ROOT
  PRODUCT_SOURCE_ROOT=${!PRODUCT_SOURCE_ROOT}
  PRODUCT_CMAKE_CONFIG_ARGS=${PRODUCT_NAME}_CMAKE_CONFIG_ARGS
  PRODUCT_CMAKE_CONFIG_ARGS=${!PRODUCT_CMAKE_CONFIG_ARGS}

  echo "mkdir -p $PRODUCT_BUILD_ROOT"

  if [[ $DRY_RUN -eq 0 ]]; then
    mkdir -p $PRODUCT_BUILD_ROOT
  fi

  pushd "$PRODUCT_BUILD_ROOT"
  echo "cmake -G Ninja $PRODUCT_SOURCE_ROOT ${PRODUCT_CMAKE_CONFIG_ARGS}"

  if [[ $DRY_RUN -eq 0 ]]; then
    cmake -G Ninja "$PRODUCT_SOURCE_ROOT" ${PRODUCT_CMAKE_CONFIG_ARGS}
  fi

  if [[ $CONFIG_PRODUCT_ONLY -ne 1 ]]; then
    echo "cmake --build $PRODUCT_BUILD_ROOT"
    if [[ $DRY_RUN -eq 0 ]]; then
      cmake --build "$PRODUCT_BUILD_ROOT"
    fi
  fi

  popd
  return 0;
}

for EACH_ARG in "$@"; do
  arg_parse "$EACH_ARG"
done

# Calculates products to build
PRODUCTS_TO_BUILD=${CUSTOM_PRODUCTS_TO_BUILD[@]};
if [[ "$PRODUCTS_TO_BUILD" == "" ]]; then
  PRODUCTS_TO_BUILD=${DEFAULT_PRODUCTS_TO_BUILD[@]};
fi

if [[ $NEEDS_CLEAN -eq 1 ]]; then
  countdown_for_clean_build 3 $PRODUCTS_TO_BUILD
  for PRODUCT_NAME in "${PRODUCTS_TO_BUILD[@]}"; do
    clean $PRODUCT_NAME
  done
fi

SECONDS=0
for PRODUCT_NAME in "${PRODUCTS_TO_BUILD[@]}"; do
  build $PRODUCT_NAME $CONFIG_ONLY
done

# do some work
DURATION=$SECONDS
echo "build ${PRODUCTS_TO_BUILD} with $(($DURATION / 60)) minutes and $(($DURATION % 60)) seconds elapsed."

exit 0
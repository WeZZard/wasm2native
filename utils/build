#!/bin/sh

ARG_BUILD_TYPE="Debug";
ARG_HOST_TOOLS_BUILD_TYPE="Release";
ARG_NEEDS_CLEAN=0;
ARG_CONFIG_ONLY=0;
ARG_CUSTOM_PRODUCTS_TO_BUILD=();
ARG_DRY_RUN=0;
ARG_FRESH=0;
# Currently only support Ninja
ARG_BUILDER="Ninja"

# $1: ARG
function arg_parse() {
  ARG=$1;
  case $ARG in
    "--debug")
      ARG_BUILD_TYPE="Debug";
      ;;
    "--release")
      ARG_BUILD_TYPE="Release";
      ;;
    "--release-with-debug-info")
      ARG_BUILD_TYPE="RelWithDebInfo";
      ;;
    "--release-min-size")
      ARG_BUILD_TYPE="MinSizeRel";
      ;;
    "--host-tools=debug")
      ARG_HOST_TOOLS_BUILD_TYPE="Debug";
      ;;
    "--host-tools=release")
      ARG_HOST_TOOLS_BUILD_TYPE="Release";
      ;;
    "--host-tools=release-with-debug-info")
      ARG_HOST_TOOLS_BUILD_TYPE="RelWithDebInfo";
      ;;
    "--host-tools=release-min-size")
      ARG_HOST_TOOLS_BUILD_TYPE="MinSizeRel";
      ;;
    "--build-toolchain")
      ARG_CUSTOM_PRODUCTS_TO_BUILD+=(TOOLCHAIN_LLVM);
      ;;
    "--build-wabt")
      ARG_CUSTOM_PRODUCTS_TO_BUILD+=(WABT);
      ;;
    "--build-wasm2native")
      ARG_CUSTOM_PRODUCTS_TO_BUILD+=(W2N);
      ;;
    "--build-llvm")
      ARG_CUSTOM_PRODUCTS_TO_BUILD+=(LLVM);
      ;;
    "--clean")
      ARG_NEEDS_CLEAN=1;
      ;;
    "--dry-run")
      ARG_DRY_RUN=1;
      ;;
    "--config-only")
      ARG_CONFIG_ONLY=1;
      ;;
    "--fresh")
      ARG_FRESH=1;
      ;;
  esac
}

for EACH_ARG in "$@"; do
  arg_parse "$EACH_ARG"
done

# TODO: Resolve this dynamically when begins to support more hosts.
HOST_SDK="macosx"
HOST_ARCH=$(uname -m)
PROJECT_ROOT=$(git rev-parse --show-toplevel)
UTILS_DIR="$PROJECT_ROOT/utils"
MONOREPO_ROOT=$(dirname $PROJECT_ROOT)

  # name            # source dir         # build dir     # category   # descriptive name
PRODUCT_INFO=(
  "TOOLCHAIN_LLVM"  "llvm-project/llvm"  "llvm"          "host-tool"  "Toolchain LLVM"
  "WABT"            "wabt"               "wabt"          "host-tool"  "WebAssembly Binary Toolkit"
  "LLVM"            "llvm-project/llvm"  "llvm"          "compiler"   "LLVM"
  "W2N"             "wasm2native"        "wasm2native"   "compiler"   "wasm2native"
)

##########################################################################
# UTILITIES
##########################################################################

# $1: NAME;
# $2: INDEX;
function _select_product_info_with_name() {
  NAME=$1
  INDEX=$2
  STRIDE=5
  if [[ $INDEX -gt $STRIDE ]]; then
    echo "Invalid index $INDEX";
    echo "Cannot select product info with index greater than $STRIDE.";
    exit 1;
  fi
  for ((BASE = 0; BASE < ${#PRODUCT_INFO[@]}; BASE += ${STRIDE})); do
    ROW_NAME=${PRODUCT_INFO[BASE]}
    if [[ "$NAME" == "$ROW_NAME" ]]; then
      RET_VAL=${PRODUCT_INFO[BASE+$INDEX]}
      return 0;
    fi
  done
  RET_VAL="Unkown produce info for product $NAME index $INDEX stride $STRIDE"
  return 1;
}

# $1: PRODUCT_NAME;
function get_source_dir_name() {
  _select_product_info_with_name $1 1;
  return $?;
}

# $1: PRODUCT_NAME;
function get_build_dir_name() {
  _select_product_info_with_name $1 2;
  return $?;
}

# $1: PRODUCT_NAME;
function get_product_category() {
  _select_product_info_with_name $1 3;
  return $?;
}

# $1: PRODUCT_NAME;
function get_descriptive_name() {
  _select_product_info_with_name $1 4;
  return $?;
}

# $1: PRODUCT_NAME;
function get_source_dir() {
  PRODUCT_NAME=$1
  get_source_dir_name $PRODUCT_NAME;
  DIR_NAME=$RET_VAL
  RET_VAL="$MONOREPO_ROOT/$DIR_NAME"
  return 0
}

# $1: PRODUCT_NAME;
# $2: BUILDER;
# $3: BUILD_TYPE;
function get_build_dir() {
  # The product's category is not inserted to the path because this can
  # accelerate release-host-tool and release-compiler build.
  PRODUCT_NAME=$1
  BUILDER=$2;
  BUILD_TYPE=$3;
  get_build_dir_name $PRODUCT_NAME;
  DIR_NAME=$RET_VAL
  RET_VAL="$MONOREPO_ROOT/build/$BUILDER-$BUILD_TYPE/$DIR_NAME-$HOST_SDK-$HOST_ARCH";
  return 0;
}

# $1: BUILD_TYPE;
function get_toolchain_install_dir() {
  TOOLCHAIN_BUILD_TYPE=$1;
  RET_VAL="$MONOREPO_ROOT/toolchain/$TOOLCHAIN_BUILD_TYPE/$HOST_SDK-$HOST_ARCH";
  return 0;
}

# $1: PRODUCT_NAME;
# $2: BUILDER;
# $3: BUILD_TYPE; The build type for the CMake project
# $4: HOST_TOOL_BUILD_TYPE; The build type of host tools that build the 
#   CMake project
function get_cmake_config_args() {
  PRODUCT_NAME=$1;
  BUILDER=$2
  BUILD_TYPE=$3;
  HOST_TOOL_BUILD_TYPE=$4;
  get_source_dir_name $PRODUCT_NAME;
  SOURCE_DIR_NAME=$RET_VAL
  get_toolchain_install_dir $HOST_TOOL_BUILD_TYPE;
  TOOLCHAIN_INSTALL_DIR=$RET_VAL
  case $SOURCE_DIR_NAME in
    "llvm-project/llvm")
      LLVM_ENABLED_PROJECTS="clang;clang-tools-extra;compiler-rt;libcxx;libcxxabi;libunwind;lld;"
      LLVM_TARGETS_TO_BUILD="ARM;AArch64;X86"
      LLVM_CMAKE_CONFIG_ARGS=()
      LLVM_CMAKE_CONFIG_ARGS+=("-DCMAKE_BUILD_TYPE=${BUILD_TYPE}")
      LLVM_CMAKE_CONFIG_ARGS+=("-DCMAKE_INSTALL_PREFIX=${TOOLCHAIN_INSTALL_DIR}")
      LLVM_CMAKE_CONFIG_ARGS+=("-DLLVM_TARGETS_TO_BUILD=${LLVM_TARGETS_TO_BUILD}")
      LLVM_CMAKE_CONFIG_ARGS+=("-DLLVM_ENABLE_PROJECTS=${LLVM_ENABLED_PROJECTS}")
      # In the near future we are aiming to build compiler-rt with
      # LLVM_ENABLE_RUNTIMES
      # Until that happens, we need to unset this variable from LLVM 
      # CMakeCache.txt for two reasons:
      # * Prevent PRs testing this variable to affect other runs landing
      # * unrelated features avoid fallouts should we land such change and
      # * then have to revert it to account for unforeseen regressions
      LLVM_CMAKE_CONFIG_ARGS+=("-ULLVM_ENABLED_RUNTIMES")
      LLVM_CMAKE_CONFIG_ARGS="${LLVM_CMAKE_CONFIG_ARGS[@]}"
      RET_VAL=$LLVM_CMAKE_CONFIG_ARGS;
      return 0;
      ;;
    "wasm2native")
      get_source_dir LLVM
      LLVM_SOURCE_ROOT=$RET_VAL
      get_build_dir LLVM $BUILDER $BUILD_TYPE
      LLVM_BUILD_ROOT=$RET_VAL
      get_source_dir W2N
      W2N_SOURCE_ROOT=$RET_VAL
      get_build_dir W2N $BUILDER $BUILD_TYPE
      W2N_BUILD_ROOT=$RET_VAL
      # CMake
      W2N_CMAKE_CONFIG_ARGS+=("-DCMAKE_BUILD_TYPE:string=${BUILD_TYPE}")
      W2N_CMAKE_CONFIG_ARGS+=("-DCMAKE_C_COMPILER:string=${TOOLCHAIN_INSTALL_DIR}/bin/clang")
      W2N_CMAKE_CONFIG_ARGS+=("-DCMAKE_CXX_COMPILER:string=${TOOLCHAIN_INSTALL_DIR}/bin/clang++")
      # LLVM
      W2N_CMAKE_CONFIG_ARGS+=("-DLLVM_BUILD_ROOT:PATH=${LLVM_BUILD_ROOT}")
      W2N_CMAKE_CONFIG_ARGS+=("-DLLVM_SOURCE_ROOT:PATH=${LLVM_SOURCE_ROOT}")
      W2N_CMAKE_CONFIG_ARGS+=("-DLLVM_DIR:PATH=${LLVM_BUILD_ROOT}/lib/cmake/llvm")
      W2N_CMAKE_CONFIG_ARGS+=("-DLLVM_TARGETS_TO_BUILD:string=${SUPPORTED_TARGETS}")
      W2N_CMAKE_CONFIG_ARGS+=("-DLLVM_BUILD_TESTS:bool=true")
      # Clang
      W2N_CMAKE_CONFIG_ARGS+=("-DClang_DIR:PATH=${LLVM_BUILD_ROOT}/lib/cmake/clang")
      # W2N
      W2N_CMAKE_CONFIG_ARGS+=("-DW2N_MONOREPO_ROOT:PATH=${MONOREPO_ROOT}")
      W2N_CMAKE_CONFIG_ARGS+=("-DW2N_SOURCE_ROOT:PATH=${W2N_SOURCE_ROOT}")
      W2N_CMAKE_CONFIG_ARGS+=("-DW2N_BUILD_ROOT:PATH=${W2N_BUILD_ROOT}")
      # TODO: Resolve W2N_HOST_VARIANT_SDK dynamically
      W2N_CMAKE_CONFIG_ARGS+=("-DW2N_HOST_VARIANT_SDK=OSX")
      W2N_CMAKE_CONFIG_ARGS+=("-DW2N_HOST_VARIANT_ARCH=${HOST_ARCH}")
      # TODO: Resolve W2N_SDKS dynamically
      W2N_CMAKE_CONFIG_ARGS+=("-DW2N_SDKS=OSX")
      W2N_CMAKE_CONFIG_ARGS+=("-DW2N_HOST_TOOLS_BIN_DIR=${TOOLCHAIN_INSTALL_DIR}/bin")
      W2N_CMAKE_CONFIG_ARGS="${W2N_CMAKE_CONFIG_ARGS[@]}"
      RET_VAL=$W2N_CMAKE_CONFIG_ARGS;
      return 0;
      ;;
    "wabt")
      WABT_CMAKE_CONFIG_ARGS=();
      WABT_CMAKE_CONFIG_ARGS+=("-DCMAKE_BUILD_TYPE:string=${BUILD_TYPE}")
      WABT_CMAKE_CONFIG_ARGS+=("-DCMAKE_INSTALL_PREFIX=${TOOLCHAIN_INSTALL_DIR}")
      WABT_CMAKE_CONFIG_ARGS+=("-DCMAKE_C_COMPILER:string=${TOOLCHAIN_INSTALL_DIR}/bin/clang")
      WABT_CMAKE_CONFIG_ARGS+=("-DCMAKE_CXX_COMPILER:string=${TOOLCHAIN_INSTALL_DIR}/bin/clang++")
      WABT_CMAKE_CONFIG_ARGS="${WABT_CMAKE_CONFIG_ARGS[@]}"
      RET_VAL=$WABT_CMAKE_CONFIG_ARGS;
      return 0;
      ;;
    *)
      echo "No CMake configuration for source dir: $SOURCE_DIR_NAME.";
      exit 1;
      ;;
  esac
}

# $1: PRODUCT_NAME;
# $2: BUILDER;
# $3: BUILD_TYPE;
function clean() {
  PRODUCT_NAME=$1
  BUILDER=$2;
  BUILD_TYPE=$3;
  get_build_dir $PRODUCT_NAME $BUILDER $BUILD_TYPE
  PRODUCT_BUILD_DIR=$RET_VAL
  if [[ ! -d $PRODUCT_BUILD_DIR ]]; then
    echo "Cleaning built products in directory \"$PRODUCT_BUILD_DIR\" but the directory itself does not exist."
    return 0
  fi
  echo "rm -rf $PRODUCT_BUILD_DIR"
  if [[ $ARG_DRY_RUN -eq 0 ]]; then
    rm -rf $PRODUCT_BUILD_DIR
  fi
  return 0;
}

# $1: PRODUCT_NAME
# $2: BUILDER
# $3: BUILD_TYPE
# $4: HOST_TOOL_BUILD_TYPE
# $5: SHOULD_INSTAL
# $6: CONFIG_ONLY
# $7: DRY_RUN
function build() {
  PRODUCT_NAME=$1;
  BUILDER=$2;
  BUILD_TYPE=$3;
  HOST_TOOL_BUILD_TYPE=$4
  SHOULD_INSTAL=$5
  CONFIG_ONLY=$6
  DRY_RUN=$7

  get_build_dir $PRODUCT_NAME $BUILDER $BUILD_TYPE;
  BUILD_DIR=$RET_VAL;

  get_source_dir $PRODUCT_NAME;
  SOURCE_DIR=$RET_VAL;

  get_cmake_config_args $PRODUCT_NAME $BUILDER $BUILD_TYPE $HOST_TOOL_BUILD_TYPE
  CMAKE_CONFIG_ARGS=$RET_VAL

  echo "mkdir -p $BUILD_DIR"

  if [[ $DRY_RUN -eq 0 ]]; then
    mkdir -p $BUILD_DIR
    pushd "$BUILD_DIR"
  fi

  echo "pushd "$BUILD_DIR""

  CMAKE_GENERATE_ARGS=()
  if [[ $ARG_FRESH -eq 1 ]]; then
    CMAKE_GENERATE_ARGS+=("--fresh")
  fi
  CMAKE_GENERATE_ARGS="${CMAKE_GENERATE_ARGS[@]}";

  echo "cmake -G $BUILDER $CMAKE_GENERATE_ARGS $SOURCE_DIR ${CMAKE_CONFIG_ARGS}"

  if [[ $DRY_RUN -eq 0 ]]; then
    cmake -G Ninja $CMAKE_GENERATE_ARGS "$SOURCE_DIR" ${CMAKE_CONFIG_ARGS};
    if [[ $? -ne 0 ]]; then
      return 1;
    fi
  fi

  CMAKE_BUILD_ARGS=()
  if [[ $SHOULD_INSTAL -eq 1 ]]; then
    CMAKE_BUILD_ARGS+=("--target install")
  fi
  CMAKE_BUILD_ARGS="${CMAKE_BUILD_ARGS[@]}";

  if [[ $CONFIG_ONLY -ne 1 ]]; then
    echo "cmake --build $BUILD_DIR $CMAKE_BUILD_ARGS"
    if [[ $DRY_RUN -eq 0 ]]; then
      cmake --build "$BUILD_DIR" ${CMAKE_BUILD_ARGS}
      if [[ $? -ne 0 ]]; then
        return 1;
      fi
    fi
  fi

  if [[ $DRY_RUN -eq 0 ]]; then
    popd
  fi

  echo "popd"

  return 0;
}

function build_host_tool_product() {
  PRODUCT_NAME=$1;
  BUILDER=$2;
  build $PRODUCT_NAME \
    $BUILDER \
    $ARG_HOST_TOOLS_BUILD_TYPE \
    $ARG_HOST_TOOLS_BUILD_TYPE \
    1 \
    $ARG_CONFIG_ONLY \
    $ARG_DRY_RUN;
}

function build_compiler_product() {
  PRODUCT_NAME=$1;
  BUILDER=$2;
  build $PRODUCT_NAME \
    $BUILDER \
    $ARG_BUILD_TYPE \
    $ARG_HOST_TOOLS_BUILD_TYPE \
    0 \
    $ARG_CONFIG_ONLY \
    $ARG_DRY_RUN;
}

function clean_host_tool_product() {
  PRODUCT_NAME=$1;
  BUILDER=$2;
  clean $PRODUCT_NAME $BUILDER $ARG_HOST_TOOLS_BUILD_TYPE;
}

function clean_compiler_product() {
  PRODUCT_NAME=$1;
  BUILDER=$2;
  clean $PRODUCT_NAME $BUILDER $ARG_BUILD_TYPE;
}

# $1: PRODUCT_NAME;
# $2: BUILDER
function build_each() {
  PRODUCT_NAME=$1;
  BUILDER=$2;
  get_product_category $PRODUCT_NAME
  CATEGORY=$RET_VAL
  case $CATEGORY in
    "host-tool")
      build_host_tool_product $PRODUCT_NAME $BUILDER
      return $?;
    ;;
    "compiler")
      build_compiler_product $PRODUCT_NAME $BUILDER
      return $?;
      ;;
    *)
      echo "Unkown product category $CATEGORY.";
      exit 1;
      ;;
  esac
  return $?;
}

# $1: PRODUCT_NAME;
# $2: BUILDER
function clean_each() {
  PRODUCT_NAME=$1;
  BUILDER=$2;
  get_product_category $PRODUCT_NAME
  CATEGORY=$RET_VAL
  case $CATEGORY in
    "host-tool")
      clean_host_tool_product $PRODUCT_NAME $BUILDER
      ;;
    "compiler")
      clean_compiler_product $PRODUCT_NAME $BUILDER
      ;;
    *)
      echo "Unkown product category $CATEGORY";
      exit 1;
      ;;
  esac
  return $?
}

# $1: SECONDS_TO_COUNTDOWN, $2: PRODUCT_NAME
function countdown_for_clean_build() {
  SEC=$1;
  PRODUCTS_DESC=$2;
  if [[ ! $SEC -ge 0 ]]; then
    echo "The number used for countdown second shall be greater than 0.";
    echo "Currently is \"$SEC\".";
    exit 1;
  fi
  while [ $SEC -ge 0 ]; do
    echo "$SEC seconds left to start the clean build of $PRODUCTS_DESC...\r\c";
    let "SEC=SEC-1";
    sleep 1;
  done
  echo ""
  return 0;
}

##########################################################################
# MAIN
##########################################################################

# TIME ELAPSE STATISTIC BEGIN
SECONDS=0;

ALL_PRODUCTS_TO_BUILD=(TOOLCHAIN_LLVM WABT LLVM W2N);

if [[ $ARG_NEEDS_CLEAN -eq 1 ]]; then
  countdown_for_clean_build 3 "toolchain LLVM, wabt, LLVM and wasm2native"
  for EACH_PRODUCT_NAME in "${ALL_PRODUCTS_TO_BUILD[@]}"; do
    clean_each $EACH_PRODUCT_NAME $ARG_BUILDER
  done
fi

# CALCULATES PRODUCTS TO BUILD
PRODUCTS_TO_BUILD=${ARG_CUSTOM_PRODUCTS_TO_BUILD[@]};
if [[ "$PRODUCTS_TO_BUILD" == "" ]]; then
  PRODUCTS_TO_BUILD=${ALL_PRODUCTS_TO_BUILD[@]};
fi

for EACH_PRODUCT_NAME in ${PRODUCTS_TO_BUILD[@]}; do
  build_each $EACH_PRODUCT_NAME $ARG_BUILDER
  if [[ $? -ne 0 ]]; then
    exit 1;
  fi
done

# REPORT TIME ELAPSE
DURATION=$SECONDS;

echo "build ${PRODUCTS_TO_BUILD} with $(($DURATION / 60)) minutes and $(($DURATION % 60)) seconds elapsed.";

exit 0;
